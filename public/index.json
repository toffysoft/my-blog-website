[{"content":"ในบทความนี้เราจะมาทดลองสร้าง AI Agent ที่สามารถโต้ตอบกับฐานข้อมูล SQLite โดยใช้ Deepseek-R1 ซึ่งเป็น Open Source Language Model ร่วมกับ Langgraph ซึ่งเป็นเครื่องมือสำหรับสร้าง AI workflows แบบใหม่จาก LangChain\nโครงสร้างของโปรเจค โปรเจคของเราประกอบด้วยไฟล์หลัก 2 ไฟล์:\nsetup.py - สำหรับสร้างและจัดการฐานข้อมูล SQLite agent.py - สำหรับสร้าง AI Agent ที่จะโต้ตอบกับฐานข้อมูล การสร้างฐานข้อมูล เริ่มต้นจาก setup.py ที่ใช้สร้างฐานข้อมูลสินค้าตัวอย่าง โดยมีตาราง products ที่เก็บข้อมูลต่างๆ เช่น:\nid (PRIMARY KEY) name price category stock description last_updated โค้ดส่วนนี้จะสร้างฐานข้อมูลพร้อมข้อมูลตัวอย่างกว่า 100 รายการ แบ่งเป็นหมวดหมู่ต่างๆ เช่น Smartphones, Laptops, TVs, Audio เป็นต้น\n# setup.py import sqlite3 import os from datetime import datetime def init_database(): try: db_path = os.path.join(os.path.dirname(__file__), \u0026#39;products.db\u0026#39;) conn = sqlite3.connect(db_path) cursor = conn.cursor() cursor.execute(\u0026#39;DROP TABLE IF EXISTS products\u0026#39;) cursor.execute(\u0026#39;\u0026#39;\u0026#39; CREATE TABLE IF NOT EXISTS products ( id INTEGER PRIMARY KEY, name TEXT NOT NULL, price REAL NOT NULL, category TEXT NOT NULL, stock INTEGER NOT NULL, description TEXT, last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ) \u0026#39;\u0026#39;\u0026#39;) cursor.execute(\u0026#39;CREATE INDEX IF NOT EXISTS idx_products_category ON products(category)\u0026#39;) cursor.execute(\u0026#39;CREATE INDEX IF NOT EXISTS idx_products_price ON products(price)\u0026#39;) cursor.execute(\u0026#39;CREATE INDEX IF NOT EXISTS idx_products_stock ON products(stock)\u0026#39;) products_data = [ # Smartphones (1, \u0026#39;iPhone 15 Pro Max\u0026#39;, 48900.00, \u0026#39;Smartphones\u0026#39;, 45, \u0026#39;1TB storage, titanium finish\u0026#39;), (2, \u0026#39;iPhone 15 Pro\u0026#39;, 42900.00, \u0026#39;Smartphones\u0026#39;, 50, \u0026#39;256GB storage, A17 Pro chip\u0026#39;), (3, \u0026#39;iPhone 15\u0026#39;, 32900.00, \u0026#39;Smartphones\u0026#39;, 60, \u0026#39;128GB storage, A16 chip\u0026#39;), (4, \u0026#39;Samsung Galaxy S24 Ultra\u0026#39;, 45900.00, \u0026#39;Smartphones\u0026#39;, 40, \u0026#39;512GB storage, S Pen included\u0026#39;), (5, \u0026#39;Samsung Galaxy S24+\u0026#39;, 35900.00, \u0026#39;Smartphones\u0026#39;, 45, \u0026#39;256GB storage, AI features\u0026#39;), (6, \u0026#39;Samsung Galaxy S24\u0026#39;, 29900.00, \u0026#39;Smartphones\u0026#39;, 55, \u0026#39;128GB storage\u0026#39;), (7, \u0026#39;Google Pixel 8 Pro\u0026#39;, 35900.00, \u0026#39;Smartphones\u0026#39;, 35, \u0026#39;Advanced AI camera features\u0026#39;), (8, \u0026#39;Google Pixel 8\u0026#39;, 27900.00, \u0026#39;Smartphones\u0026#39;, 40, \u0026#39;Android flagship\u0026#39;), (9, \u0026#39;OnePlus 12\u0026#39;, 31900.00, \u0026#39;Smartphones\u0026#39;, 30, \u0026#39;Snapdragon 8 Gen 3\u0026#39;), (10, \u0026#39;Xiaomi 14 Pro\u0026#39;, 29900.00, \u0026#39;Smartphones\u0026#39;, 40, \u0026#39;Leica optics\u0026#39;), # Laptops (11, \u0026#39;MacBook Pro 16\u0026#34;\u0026#39;, 89900.00, \u0026#39;Laptops\u0026#39;, 25, \u0026#39;M3 Max chip, 32GB RAM\u0026#39;), ........ ] cursor.executemany(\u0026#39;\u0026#39;\u0026#39; INSERT OR REPLACE INTO products (id, name, price, category, stock, description) VALUES (?, ?, ?, ?, ?, ?) \u0026#39;\u0026#39;\u0026#39;, products_data) conn.commit() print(\u0026#34;Database initialized successfully!\u0026#34;) return conn except sqlite3.Error as e: print(f\u0026#34;SQLite error: {e}\u0026#34;) return None except Exception as e: print(f\u0026#34;Error: {e}\u0026#34;) return None def main(): conn = init_database() if not conn: print(\u0026#34;Failed to initialize database\u0026#34;) return if __name__ == \u0026#34;__main__\u0026#34;: main() เราสามารถสร้างฐานข้อมูลด้วยคำสั่ง:\npython setup.py การสร้าง AI Agent ส่วนที่น่าสนใจที่สุดคือการสร้าง AI Agent ใน agent.py โดยใช้ Langgraph ร่วมกับ Deepseek-R1 โดยมีองค์ประกอบหลักๆ ดังนี้:\nPre-requisites pip install langchain langgraph langchain_core langchain_ollama 1. SQLite Tools เราสร้างคลาส SQLiteTools เพื่อจัดการการทำงานกับฐานข้อมูล:\nclass SQLiteTools: def __init__(self, db_path: str): self.db_path = db_path def execute_query(self, query: str) -\u0026gt; List[Tuple]: \u0026#34;\u0026#34;\u0026#34; Function to execute SQL queries \u0026#34;\u0026#34;\u0026#34; try: with sqlite3.connect(self.db_path) as conn: cursor = conn.cursor() cursor.execute(query) return cursor.fetchall() except Exception as e: return f\u0026#34;Error execute_query occurred: {str(e)}\u0026#34; def get_table_schema(self, *args) -\u0026gt; Dict[str, List[str]]: \u0026#34;\u0026#34;\u0026#34;Get schema information for all tables\u0026#34;\u0026#34;\u0026#34; try: with sqlite3.connect(self.db_path) as conn: cursor = conn.cursor() cursor.execute(\u0026#34;SELECT name FROM sqlite_master WHERE type=\u0026#39;table\u0026#39;;\u0026#34;) tables = cursor.fetchall() schema = {} for table in tables: table_name = table[0] cursor.execute(f\u0026#34;PRAGMA table_info({table_name})\u0026#34;) columns = cursor.fetchall() schema[table_name] = [ { \u0026#34;name\u0026#34;: col[1], \u0026#34;type\u0026#34;: col[2], \u0026#34;notnull\u0026#34;: col[3], \u0026#34;pk\u0026#34;: col[5] } for col in columns ] return schema except Exception as e: return f\u0026#34;Error get_table_schema occurred: {str(e)}\u0026#34; 2. สร้าง AI Agent class SQLiteAgent: def __init__(self, db_path: str, model_name: str = \u0026#34;deepseek-r1:8b\u0026#34;): self.db_tools = SQLiteTools(db_path) 2.1. การตั้งค่า LLM เราใช้ Deepseek-R1 ผ่าน Ollama โดยตั้งค่าดังนี้:\nself.llm = ChatOllama( model=model_name, temperature=0, # ความแปรปรวนในการสร้างข้อความ ใช้ 0 สำหรับความแม่นยำสูงสุด callbacks=[StreamingStdOutCallbackHandler()], base_url=\u0026#34;http://localhost:11434\u0026#34;, streaming=True ) 2.2. การสร้าง Tools Agent ของเราสามารถใช้งาน tools 2 อย่างคือ:\nexecute_query - สำหรับ execute SQL query get_schema - สำหรับดูโครงสร้างฐานข้อมูล self.tools = [ Tool( name=\u0026#34;execute_query\u0026#34;, func=self.db_tools.execute_query, description=\u0026#34;Execute a SQL query. Input should be a valid SQL query string.\u0026#34; ), Tool( name=\u0026#34;get_schema\u0026#34;, func=self.db_tools.get_table_schema, description=\u0026#34;Get the database schema. No input needed.\u0026#34; ) ] 2.3. การสร้าง Prompt Template เราสร้าง prompt template ที่กำหนดรูปแบบการคิดและตอบของ AI:\nself.prompt = ChatPromptTemplate.from_messages([ (\u0026#34;system\u0026#34;, \u0026#34;\u0026#34;\u0026#34;You are a SQL database assistant. Follow the format below EXACTLY, including EXACT spacing and punctuation: Thought: [your reasoning] Action: [tool name] Action Input: [tool input] Observation: [tool output] ... (this Thought/Action/Action Input/Observation can repeat if needed) Thought: [your conclusion] Final Answer: [your response] Available tools: {tool_names} {tools} Remember: 1. ALWAYS start with \u0026#34;Thought:\u0026#34; 2. ALWAYS include \u0026#34;Action:\u0026#34; after \u0026#34;Thought:\u0026#34; 3. ALWAYS follow the exact format above 4. NEVER include multiple actions without observations between them 5. NEVER skip steps in the format\u0026#34;\u0026#34;\u0026#34;), (\u0026#34;human\u0026#34;, \u0026#34;{input}\u0026#34;), (\u0026#34;ai\u0026#34;, \u0026#34;{agent_scratchpad}\u0026#34;) ]) 2.4. สร้าง Agent และ Workflow สร้าง state schema สำหรับ agent:\nclass AgentState(TypedDict): input: str output: Any messages: List[Any] Langgraph ช่วยให้เราสร้าง workflow แบบ state-based ได้ง่าย:\nself.agent = create_react_agent( llm=self.llm, tools=self.tools, prompt=self.prompt ) self.agent_executor = AgentExecutor( agent=self.agent, tools=self.tools, verbose=True, return_intermediate_steps=True, # สำหรับการแสดงข้อความระหว่างการทำงาน handle_parsing_errors=True, # จัดการข้อผิดพลาดในการแปลงข้อความ max_iterations=5 # จำกัดจำนวนรอบการทำงาน (เพื่อป้องกันการวนลูป) ) def run(self, query: str) -\u0026gt; Any: \u0026#34;\u0026#34;\u0026#34; Run Agent to process queries \u0026#34;\u0026#34;\u0026#34; try: def process_agent(state: Dict) -\u0026gt; Dict: # Call agent executor result = self.agent_executor.invoke({ \u0026#34;input\u0026#34;: state[\u0026#34;input\u0026#34;], \u0026#34;agent_scratchpad\u0026#34;: state.get(\u0026#34;messages\u0026#34;, []) }) # Create messages messages = [] if \u0026#34;intermediate_steps\u0026#34; in result: for step in result[\u0026#34;intermediate_steps\u0026#34;]: action, output = step messages.extend([ AIMessage(content=str(action)), HumanMessage(content=str(output)) ]) # Update state return { \u0026#34;input\u0026#34;: state[\u0026#34;input\u0026#34;], \u0026#34;output\u0026#34;: result.get(\u0026#34;output\u0026#34;, \u0026#34;\u0026#34;), \u0026#34;messages\u0026#34;: messages } workflow = StateGraph(state_schema=AgentState) workflow.add_node(\u0026#34;agent\u0026#34;, process_agent) workflow.set_entry_point(\u0026#34;agent\u0026#34;) workflow.add_edge(\u0026#34;agent\u0026#34;, END) app = workflow.compile() # Create initial state initial_state = { \u0026#34;input\u0026#34;: query, \u0026#34;output\u0026#34;: None, \u0026#34;messages\u0026#34;: [] } # Run workflow result = app.invoke(initial_state) # Get results return result[\u0026#34;output\u0026#34;] except ValueError as e: if \u0026#34;Could not parse LLM output\u0026#34; in str(e): return f\u0026#34;Error: The model response could not be parsed. Original query: {query}\u0026#34; raise except Exception as e: return f\u0026#34;An error occurred: {str(e)}\u0026#34; การใช้งาน สร้าง function สำหรับเรียกใช้งาน agent:\n# Usage example # Command line interface if __name__ == \u0026#34;__main__\u0026#34;: import argparse import sys # สร้าง argument parser parser = argparse.ArgumentParser(description=\u0026#39;SQLite AI Assistant\u0026#39;) parser.add_argument(\u0026#39;--db\u0026#39;, type=str, default=\u0026#34;products.db\u0026#34;, help=\u0026#39;Database file path\u0026#39;) parser.add_argument(\u0026#39;--model\u0026#39;, type=str, default=\u0026#34;deepseek-r1:8b\u0026#34;, help=\u0026#39;Ollama model name\u0026#39;) parser.add_argument(\u0026#39;prompt\u0026#39;, type=str, nargs=\u0026#39;+\u0026#39;, help=\u0026#39;Natural language prompt\u0026#39;) # Parse arguments args = parser.parse_args() # สร้าง Agent agent = SQLiteAgent(args.db, model_name=args.model) try: # รวมคำสั่งเป็น string เดียว prompt = \u0026#39; \u0026#39;.join(args.prompt) # ส่งคำสั่งไปให้ agent result = agent.run(prompt) print(result) except Exception as e: print(f\u0026#34;เกิดข้อผิดพลาด: {str(e)}\u0026#34;) เราสามารถใช้งาน AI Agent ผ่าน command line ได้ดังนี้:\npython agent.py \u0026#34;Show me 10 products under 20000\u0026#34; Result: Agent สามารถ:\nเข้าใจคำถามภาษาธรรมชาติ แปลงเป็น SQL query ส่ง query ไปยังฐานข้อมูล แปลงผลลัพธ์กลับมาเป็นภาษาธรรมชาติ สร้าง API สำหรับโต้ตอบกับ agent ผ่าน HTTP request ด้วย FastAPI Pre-requisites:\npip install fastapi uvicorn เพิ่มไฟล์ api.py สำหรับสร้าง API ที่ใช้งาน agent:\n# api.py from fastapi import FastAPI, HTTPException from fastapi.middleware.cors import CORSMiddleware from pydantic import BaseModel import asyncio from typing import Optional import uvicorn from agent import SQLiteAgent class QueryRequest(BaseModel): query: str model_name: Optional[str] = \u0026#34;deepseek-r1:8b\u0026#34; db_path: Optional[str] = \u0026#34;products.db\u0026#34; class QueryResponse(BaseModel): result: str error: Optional[str] = None app = FastAPI(title=\u0026#34;SQLite AI Assistant\u0026#34;) app.add_middleware( CORSMiddleware, allow_origins=[\u0026#34;*\u0026#34;], allow_credentials=True, allow_methods=[\u0026#34;*\u0026#34;], allow_headers=[\u0026#34;*\u0026#34;], ) @app.post(\u0026#34;/query\u0026#34;, response_model=QueryResponse) async def process_query(request: QueryRequest): try: agent = SQLiteAgent(request.db_path, model_name=request.model_name) result = agent.run(request.query) return QueryResponse(result=str(result)) except Exception as e: raise HTTPException(status_code=500, detail=str(e)) def run_fastapi(): uvicorn.run(app, host=\u0026#34;0.0.0.0\u0026#34;, port=8000) if __name__ == \u0026#34;__main__\u0026#34;: run_fastapi() รัน API ด้วยคำสั่ง:\npython api.py เราสามารถใช้งาน agent ผ่าน API ได้ดังนี้:\nสร้าง web interface สำหรับโต้ตอบกับ agent Pre-requisites:\npip install streamlit เพิ่มไฟล์ app.py สำหรับสร้าง web interface ที่ใช้งาน agent:\n# app.py import streamlit as st import json from agent import SQLiteAgent def main(): st.set_page_config( page_title=\u0026#34;SQLite AI Assistant\u0026#34;, page_icon=\u0026#34;🤖\u0026#34;, layout=\u0026#34;wide\u0026#34; ) st.title(\u0026#34;🤖 SQLite AI Assistant\u0026#34;) # Sidebar configuration with st.sidebar: st.header(\u0026#34;⚙️ Configuration\u0026#34;) model_name = st.selectbox( \u0026#34;Select Model\u0026#34;, [\u0026#34;deepseek-r1:8b\u0026#34;], index=0 ) db_path = st.text_input( \u0026#34;Database Path\u0026#34;, value=\u0026#34;products.db\u0026#34; ) st.markdown(\u0026#34;---\u0026#34;) st.markdown(\u0026#34;\u0026#34;\u0026#34; ### Example Queries: - show database schema - show first 5 rows from products table - count total records in products table \u0026#34;\u0026#34;\u0026#34;) # Main content query = st.text_area(\u0026#34;Enter your query:\u0026#34;, height=100) if st.button(\u0026#34;🚀 Execute Query\u0026#34;, type=\u0026#34;primary\u0026#34;): if query: try: with st.spinner(\u0026#34;Processing...\u0026#34;): # Create agent and process query agent = SQLiteAgent(db_path, model_name=model_name) result = agent.run(query) # Show results st.success(\u0026#34;Query executed successfully!\u0026#34;) # Add to history if \u0026#39;history\u0026#39; not in st.session_state: st.session_state.history = [] st.session_state.history.append((query, result)) # Check if result is JSON try: if isinstance(result, str): json_result = json.loads(result) st.json(json_result) else: st.write(result) except: st.write(result) except Exception as e: st.error(f\u0026#34;Error: {str(e)}\u0026#34;) else: st.warning(\u0026#34;Please enter a query\u0026#34;) # History section with st.expander(\u0026#34;📜 Query History\u0026#34;, expanded=False): if \u0026#39;history\u0026#39; not in st.session_state: st.session_state.history = [] # Show query history for idx, (past_query, past_result) in enumerate(st.session_state.history): st.markdown(f\u0026#34;**Query {idx+1}:** {past_query}\u0026#34;) st.markdown(f\u0026#34;**Result:** {past_result}\u0026#34;) st.markdown(\u0026#34;---\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() รัน web interface ด้วยคำสั่ง:\nstreamlit run app.py เราสามารถใช้งาน agent ผ่าน web interface ได้ดังนี้:\nสรุป การใช้ Langgraph ร่วมกับ Deepseek-R1 ทำให้เราสามารถสร้าง AI Agent ที่ชาญฉลาดได้ง่ายขึ้น โดย:\nLanggraph ช่วยจัดการ workflow ของ agent Deepseek-R1 ให้ความสามารถในการเข้าใจภาษาธรรมชาติและแปลงเป็น SQL ระบบ tools ช่วยให้ agent มีความสามารถที่หลากหลาย นี่เป็นเพียงตัวอย่างเบื้องต้น เรายังสามารถพัฒนาต่อยอดได้อีกมาก เช่น:\nเพิ่ม tools ให้ทำงานอื่นๆ ได้ ปรับปรุง prompt template ให้ฉลาดขึ้น เพิ่มความสามารถในการจดจำบริบทการสนทนา อ้างอิง GitHub Repo Langgraph Documentation Deepseek-R1 Ollama ","permalink":"http://localhost:1313/posts/agent-example/","summary":"\u003cp\u003eในบทความนี้เราจะมาทดลองสร้าง AI Agent ที่สามารถโต้ตอบกับฐานข้อมูล SQLite โดยใช้ Deepseek-R1 ซึ่งเป็น Open Source Language Model ร่วมกับ Langgraph ซึ่งเป็นเครื่องมือสำหรับสร้าง AI workflows แบบใหม่จาก LangChain\u003c/p\u003e\n\u003ch2 id=\"โครงสรางของโปรเจค\"\u003eโครงสร้างของโปรเจค\u003c/h2\u003e\n\u003cp\u003eโปรเจคของเราประกอบด้วยไฟล์หลัก 2 ไฟล์:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003esetup.py\u003c/code\u003e - สำหรับสร้างและจัดการฐานข้อมูล SQLite\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eagent.py\u003c/code\u003e - สำหรับสร้าง AI Agent ที่จะโต้ตอบกับฐานข้อมูล\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"การสรางฐานขอมล\"\u003eการสร้างฐานข้อมูล\u003c/h2\u003e\n\u003cp\u003eเริ่มต้นจาก \u003ccode\u003esetup.py\u003c/code\u003e ที่ใช้สร้างฐานข้อมูลสินค้าตัวอย่าง โดยมีตาราง products ที่เก็บข้อมูลต่างๆ เช่น:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eid (PRIMARY KEY)\u003c/li\u003e\n\u003cli\u003ename\u003c/li\u003e\n\u003cli\u003eprice\u003c/li\u003e\n\u003cli\u003ecategory\u003c/li\u003e\n\u003cli\u003estock\u003c/li\u003e\n\u003cli\u003edescription\u003c/li\u003e\n\u003cli\u003elast_updated\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eโค้ดส่วนนี้จะสร้างฐานข้อมูลพร้อมข้อมูลตัวอย่างกว่า 100 รายการ แบ่งเป็นหมวดหมู่ต่างๆ เช่น Smartphones, Laptops, TVs, Audio เป็นต้น\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# setup.py\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003esqlite3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eos\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edatetime\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edatetime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einit_database\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edb_path\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edirname\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vm\"\u003e__file__\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;products.db\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003econn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esqlite3\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edb_path\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecursor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecursor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;DROP TABLE IF EXISTS products\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e        CREATE TABLE IF NOT EXISTS products (\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e            id INTEGER PRIMARY KEY,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e            name TEXT NOT NULL,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e            price REAL NOT NULL,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e            category TEXT NOT NULL,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e            stock INTEGER NOT NULL,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e            description TEXT,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e            last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e        \u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;CREATE INDEX IF NOT EXISTS idx_products_category ON products(category)\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;CREATE INDEX IF NOT EXISTS idx_products_price ON products(price)\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;CREATE INDEX IF NOT EXISTS idx_products_stock ON products(stock)\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eproducts_data\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e# Smartphones\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;iPhone 15 Pro Max\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e48900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;1TB storage, titanium finish\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;iPhone 15 Pro\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e42900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;256GB storage, A17 Pro chip\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;iPhone 15\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e32900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e60\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;128GB storage, A16 chip\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Samsung Galaxy S24 Ultra\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e45900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;512GB storage, S Pen included\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Samsung Galaxy S24+\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e35900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;256GB storage, AI features\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Samsung Galaxy S24\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e29900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e55\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;128GB storage\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Google Pixel 8 Pro\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e35900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e35\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Advanced AI camera features\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Google Pixel 8\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e27900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Android flagship\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;OnePlus 12\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e31900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Snapdragon 8 Gen 3\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Xiaomi 14 Pro\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e29900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Smartphones\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Leica optics\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e# Laptops\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;MacBook Pro 16\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e89900.00\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Laptops\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;M3 Max chip, 32GB RAM\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"o\"\u003e........\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecutemany\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e        INSERT OR REPLACE INTO products (id, name, price, category, stock, description)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e        VALUES (?, ?, ?, ?, ?, ?)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e        \u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eproducts_data\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecommit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Database initialized successfully!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003econn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eexcept\u003c/span\u003e \u003cspan class=\"n\"\u003esqlite3\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;SQLite error: \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eexcept\u003c/span\u003e \u003cspan class=\"ne\"\u003eException\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Error: \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003econn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einit_database\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Failed to initialize database\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vm\"\u003e__name__\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eเราสามารถสร้างฐานข้อมูลด้วยคำสั่ง:\u003c/p\u003e","title":"ลองเล่น Deepseek-R1 และสร้าง AI Agent ด้วย Langgraph"},{"content":"ลองเล่น Local LLM ด้วย Ollama + Python บทความนี้จะพาทุกคนมาลองใช้งาน LLM บนเครื่องคอมพิวเตอร์ส่วนตัวผ่าน Ollama และ Python เหมาะสำหรับผู้ที่อยากทดลองเล่น AI แต่กังวลเรื่องความเป็นส่วนตัวของข้อมูล หรือต้องการระบบที่ทำงานได้แม้ไม่มีอินเทอร์เน็ต\nที่มาของ Large Language Model (LLM) ในช่วงไม่กี่ปีที่ผ่านมา เราได้เห็นการเติบโตอย่างก้าวกระโดดของ AI โดยเฉพาะในด้านการประมวลผลภาษาธรรมชาติ จุดเปลี่ยนสำคัญเกิดขึ้นเมื่อนักวิจัยพบว่า การสร้างโมเดลขนาดใหญ่และฝึกฝนด้วยข้อมูลมหาศาล ทำให้ AI สามารถเข้าใจและตอบโต้กับมนุษย์ได้อย่างน่าทึ่ง\nปัจจุบันมีบริการ LLM มากมายให้เลือกใช้ เช่น ChatGPT, Claude, Gemini แต่หลายคนอาจกังวลเรื่องความเป็นส่วนตัวของข้อมูล หรือต้องการระบบที่ทำงานได้แม้ไม่มีอินเทอร์เน็ต นั่นคือที่มาของ Local LLM\nรู้จักกับ Ollama Ollama เป็นเครื่องมือที่ช่วยให้เราสามารถรัน LLM บนเครื่องคอมพิวเตอร์ส่วนตัวได้อย่างง่ายดาย รองรับโมเดลหลากหลาย เช่น Llama 3, Mistral, CodeLlama โดยมีจุดเด่นคือ:\nติดตั้งง่าย รองรับทั้ง Windows, macOS และ Linux มี API ที่ใช้งานสะดวก ประสิทธิภาพดี ใช้ทรัพยากรเครื่องน้อย รองรับการปรับแต่งโมเดลได้ตามต้องการ การติดตั้ง 1. ติดตั้ง Ollama สำหรับ macOS:\nbrew install ollama สำหรับ Linux:\ncurl -fsSL https://ollama.com/install.sh | sh สำหรับ Windows สามารถดาวน์โหลดได้จาก เว็บไซต์ Ollama\n2. ติดตั้ง Python Package pip install ollama เริ่มต้นใช้งาน 1. ดาวน์โหลดโมเดล เริ่มจากเปิด Terminal แล้วรันคำสั่ง:\nollama pull llama3.1 2. ทดสอบด้วย Python สร้างไฟล์ test_ollama.py:\nimport ollama def simple_chat(): response = ollama.chat(model=\u0026#39;llama3.1\u0026#39;, messages=[ {\u0026#39;role\u0026#39;: \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;: \u0026#39;สวัสดี คุณทำอะไรได้บ้าง?\u0026#39;} ]) print(response[\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;]) # ทดสอบเรียกใช้งาน if __name__ == \u0026#39;__main__\u0026#39;: simple_chat() ลองรันทดสอบ:\npython test_ollama.py Output:\nสวัสดีค่ะ ฉันสามารถตอบคำถามของคุณได้ เช่น การเรียนรู้ภาษา คำนวณเลขคณิต ช่วยหาข้อมูลเกี่ยวกับประเทศหรือเมือง ขอข้อมูลเกี่ยวกับต่างๆ อีกมากมายค่ะ การใช้งานขั้นสูงขึ้น การสร้าง Chat Assistant สร้างไฟล์ assistant.py:\nimport ollama from typing import List, Dict class ChatAssistant: def __init__(self, model_name: str = \u0026#39;llama3.1\u0026#39;): self.model = model_name self.conversation_history: List[Dict[str, str]] = [] def chat(self, message: str) -\u0026gt; str: self.conversation_history.append({ \u0026#39;role\u0026#39;: \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;: message }) response = ollama.chat( model=self.model, messages=self.conversation_history ) self.conversation_history.append({ \u0026#39;role\u0026#39;: \u0026#39;assistant\u0026#39;, \u0026#39;content\u0026#39;: response[\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;] }) return response[\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;] def clear_history(self): self.conversation_history = [] ตัวอย่างการใช้งาน Chat Assistant สร้างไฟล์ chat.py:\nfrom assistant import ChatAssistant assistant = ChatAssistant() questions = [ \u0026#34;Python คืออะไร?\u0026#34;, \u0026#34;ยกตัวอย่างการใช้งาน list comprehension\u0026#34;, \u0026#34;แล้ว dictionary comprehension ล่ะ?\u0026#34; ] for question in questions: print(f\u0026#34;\\nคำถาม: {question}\u0026#34;) print(f\u0026#34;คำตอบ: {assistant.chat(question)}\u0026#34;) ลองรันทดสอบ:\npython chat.py Output:\nคำถาม: Python คืออะไร? คำตอบ: ภาษาเชิงสคริปต์ (Scripting language) ที่ใช้ในการเขียนโปรแกรมคอมพิวเตอร์ โดยมีลักษณะเฉพาะคือความสามารถในการนำโค้ดไปใช้งานได้ทันทีโดยไม่ต้องบันทึกลงไปในไฟล์ใดๆ คำถาม: ยกตัวอย่างการใช้งาน list comprehension คำตอบ: **List Comprehension ในภาษา Python** List comprehension เป็นฟังก์ชันพิเศษในภาษา Python ที่สามารถสร้างรายการ (list) ได้อย่างรวดเร็วและง่ายดาย โดยไม่ต้องใช้ loop หรือการเขียนโค้ดซ้ำๆ ตัวอย่างการใช้งาน list comprehension: **1. สร้างรายการที่มีขนาดเฉพาะ** `python numbers = [i for i in range(10)] print(numbers) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ` **2. ฟิลเตอร์รายการ** `python numbers = [i for i in range(10) if i % 2 == 0] print(numbers) # [0, 2, 4, 6, 8] ` **3. ทำการปฏิบัติการบนรายการ** `python numbers = [i ** 2 for i in range(5)] print(numbers) # [0, 1, 4, 9, 16] ` **4. รวมสองรายการเข้าด้วยกัน** `python names = [\u0026#39;John\u0026#39;, \u0026#39;Alice\u0026#39;, \u0026#39;Bob\u0026#39;] ages = [25, 30, 35] people = [{name: age} for name, age in zip(names, ages)] print(people) # [{\u0026#39;John\u0026#39;: 25}, {\u0026#39;Alice\u0026#39;: 30}, {\u0026#39;Bob\u0026#39;: 35}] ` นี่คือตัวอย่างการใช้งาน list comprehension ในภาษา Python มีหลายกรณีที่สามารถใช้ได้ และมันช่วยให้คุณเขียนโค้ดที่กระชับและง่ายดายมากขึ้น! คำถาม: แล้ว dictionary comprehension ล่ะ? คำตอบ: **Dictionary Comprehension ในภาษา Python** Dictionary comprehension เป็นฟังก์ชันพิเศษในภาษา Python ที่สามารถสร้าง辞านวารี (dictionary) ได้อย่างรวดเร็วและง่ายดาย โดยไม่ต้องใช้ loop หรือการเขียนโค้ดซ้ำๆ ตัวอย่างการใช้งาน dictionary comprehension: **1. สร้าง辞านวารีที่มีขนาดเฉพาะ** `python numbers = {i: i * 2 for i in range(5)} print(numbers) # {0: 0, 1: 2, 2: 4, 3: 6, 4: 8} ` **2. ฟิลเตอร์รายการ** `python numbers = {i: i * 2 for i in range(10) if i % 2 == 0} print(numbers) # {0: 0, 2: 4, 4: 8, 6: 12, 8: 16} ` **3. ทำการปฏิบัติการบนรายการ** `python numbers = {i: i ** 2 for i in range(5)} print(numbers) # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16} ` **4. รวมสองรายการเข้าด้วยกัน** `python names = [\u0026#39;John\u0026#39;, \u0026#39;Alice\u0026#39;, \u0026#39;Bob\u0026#39;] ages = [25, 30, 35] people = {name: age for name, age in zip(names, ages)} print(people) # {\u0026#39;John\u0026#39;: 25, \u0026#39;Alice\u0026#39;: 30, \u0026#39;Bob\u0026#39;: 35} ` นี่คือตัวอย่างการใช้งาน dictionary comprehension ในภาษา Python มีหลายกรณีที่สามารถใช้ได้ และมันช่วยให้คุณเขียนโค้ดที่กระชับและง่ายดายมากขึ้น! ความแตกต่างระหว่าง list comprehension และ dictionary comprehension คือ: * List comprehension สร้างรายการ (list) ขณะที่ dictionary comprehension สร้าง辞านวารี (dictionary) * ใน list comprehension เราสามารถใช้คำสั่ง `for` ได้ทั้งสองฝ่าย (left-hand side และ right-hand side) ในขณะที่ใน dictionary comprehension เราสามารถใช้คำสั่ง `for` ได้เพียงฝ่ายหนึ่งเท่านั้น การปรับแต่งพารามิเตอร์ เราสามารถปรับแต่งการทำงานของ LLM ได้ผ่านพารามิเตอร์ต่างๆ:\nสร้างไฟล์ advanced_chat.py:\nimport ollama def advanced_chat(prompt: str): response = ollama.chat( model=\u0026#39;llama3.1\u0026#39;, messages=[{\u0026#39;role\u0026#39;: \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;: prompt}], options={ \u0026#39;temperature\u0026#39;: 0.7, # ควบคุมความสร้างสรรค์ (0.0 - 1.0) \u0026#39;top_p\u0026#39;: 0.9, # ควบคุมความหลากหลายของคำตอบ \u0026#39;top_k\u0026#39;: 40, # จำนวนโทเค็นที่พิจารณา \u0026#39;num_predict\u0026#39;: 4069 # ความยาวสูงสุดของคำตอบ } ) return response[\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;] # ทดสอบเรียกใช้งาน if __name__ == \u0026#39;__main__\u0026#39;: prompt = \u0026#34;เล่าเรื่องตลกให้ฟังหน่อยสิ\u0026#34; print(advanced_chat(prompt)) ลองรันทดสอบ:\npython advanced_chat.py Output:\nมีชายคนหนึ่งซื้อหมูจากตลาดกลับบ้านเพื่อให้ทานเย็น แต่เมื่อลูกสาวของเขาเห็นหมู เธอก็บอกพ่อว่า \u0026#34;พ่อ ฉันอยากจะเลี้ยงหมูตัวนั้นก่อน\u0026#34; ชายคนนั้นพยายามที่จะทำให้ลูกสาวตกใจและบอกเธอว่า \u0026#34;หมูนี้เป็นหมูที่มีชื่อเสียงมาก มันสามารถปรุงแต่งอาหารได้ทุกชนิด แต่สิ่งที่สำคัญที่สุดคือมันไม่ต้องการเงิน\u0026#34; หญิงสาวตอบว่า \u0026#34;นั่นก็ทำให้ฉันประหลาดใจจริงๆ ที่เราสามารถจ่ายค่าตอบแทนทางเงินให้มันได้!\u0026#34; การใช้งานกับ Stream Ollama รองรับการ stream ข้อความตอบกลับแบบ real-time:\nimport ollama def stream_chat(prompt: str): stream = ollama.chat( model=\u0026#39;llama3.1\u0026#39;, messages=[{\u0026#39;role\u0026#39;: \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;: prompt}], stream=True ) # พิมพ์ข้อความทีละส่วนตามที่ได้รับ for chunk in stream: if chunk[\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;]: print(chunk[\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;], end=\u0026#39;\u0026#39;, flush=True) การจัดการกับข้อผิดพลาด import ollama def safe_chat(prompt: str) -\u0026gt; str: try: response = ollama.chat( model=\u0026#39;llama3.1\u0026#39;, messages=[{\u0026#39;role\u0026#39;: \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;: prompt}] ) return response[\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;] except Exception as e: return f\u0026#34;เกิดข้อผิดพลาด: {str(e)}\u0026#34; ข้อควรระวังและข้อจำกัด ทรัพยากรเครื่อง\nต้องการ RAM อย่างน้อย 8GB ควรมี GPU สำหรับประสิทธิภาพที่ดี พื้นที่ดิสก์สำหรับเก็บโมเดล (ประมาณ 4-8GB ต่อโมเดล) ความแม่นยำ\nLocal LLM อาจมีความแม่นยำน้อยกว่าโมเดลออนไลน์ ควรตรวจสอบผลลัพธ์เสมอ โดยเฉพาะในงานสำคัญ การอัพเดท\nติดตามการอัพเดทของ Ollama และโมเดลอยู่เสมอ อาจต้อง pull โมเดลใหม่เมื่อมีเวอร์ชันอัพเดท สรุป การใช้ Local LLM ผ่าน Ollama เป็นทางเลือกที่น่าสนใจสำหรับผู้ที่ต้องการความเป็นส่วนตัวหรือต้องการระบบที่ทำงานได้แบบ offline ถึงแม้จะมีข้อจำกัดบางประการ แต่ก็สามารถนำไปประยุกต์ใช้ได้หลากหลาย ตั้งแต่การสร้าง chatbot ไปจนถึงการประมวลผลเอกสาร\nแหล่งข้อมูลเพิ่มเติม GitHub Repo Ollama Official Documentation Ollama GitHub Repository Python Package Documentation บทความนี้อัพเดทล่าสุด: กุมภาพันธ์ 2025\nNote: ตัวอย่างโค้ดทั้งหมดทดสอบบน Python 3.10+\nCover image by Ollama\nปล. บทความนี้เขียนด้วย AI (^ . ^)\n","permalink":"http://localhost:1313/posts/ollama-python/","summary":"\u003ch1 id=\"ลองเลน-local-llm-ดวย-ollama--python\"\u003eลองเล่น Local LLM ด้วย Ollama + Python\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003eบทความนี้จะพาทุกคนมาลองใช้งาน LLM บนเครื่องคอมพิวเตอร์ส่วนตัวผ่าน Ollama และ Python เหมาะสำหรับผู้ที่อยากทดลองเล่น AI แต่กังวลเรื่องความเป็นส่วนตัวของข้อมูล หรือต้องการระบบที่ทำงานได้แม้ไม่มีอินเทอร์เน็ต\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"ทมาของ-large-language-model-llm\"\u003eที่มาของ Large Language Model (LLM)\u003c/h2\u003e\n\u003cp\u003eในช่วงไม่กี่ปีที่ผ่านมา เราได้เห็นการเติบโตอย่างก้าวกระโดดของ AI โดยเฉพาะในด้านการประมวลผลภาษาธรรมชาติ จุดเปลี่ยนสำคัญเกิดขึ้นเมื่อนักวิจัยพบว่า การสร้างโมเดลขนาดใหญ่และฝึกฝนด้วยข้อมูลมหาศาล ทำให้ AI สามารถเข้าใจและตอบโต้กับมนุษย์ได้อย่างน่าทึ่ง\u003c/p\u003e\n\u003cp\u003eปัจจุบันมีบริการ LLM มากมายให้เลือกใช้ เช่น ChatGPT, Claude, Gemini แต่หลายคนอาจกังวลเรื่องความเป็นส่วนตัวของข้อมูล หรือต้องการระบบที่ทำงานได้แม้ไม่มีอินเทอร์เน็ต นั่นคือที่มาของ Local LLM\u003c/p\u003e\n\u003ch2 id=\"รจกกบ-ollama\"\u003eรู้จักกับ Ollama\u003c/h2\u003e\n\u003cp\u003eOllama เป็นเครื่องมือที่ช่วยให้เราสามารถรัน LLM บนเครื่องคอมพิวเตอร์ส่วนตัวได้อย่างง่ายดาย รองรับโมเดลหลากหลาย เช่น Llama 3, Mistral, CodeLlama โดยมีจุดเด่นคือ:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eติดตั้งง่าย รองรับทั้ง Windows, macOS และ Linux\u003c/li\u003e\n\u003cli\u003eมี API ที่ใช้งานสะดวก\u003c/li\u003e\n\u003cli\u003eประสิทธิภาพดี ใช้ทรัพยากรเครื่องน้อย\u003c/li\u003e\n\u003cli\u003eรองรับการปรับแต่งโมเดลได้ตามต้องการ\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"การตดตง\"\u003eการติดตั้ง\u003c/h2\u003e\n\u003ch3 id=\"1-ตดตง-ollama\"\u003e1. ติดตั้ง Ollama\u003c/h3\u003e\n\u003cp\u003eสำหรับ macOS:\u003c/p\u003e","title":"ลองเล่น Local LLM ด้วย Ollama + Python"}]